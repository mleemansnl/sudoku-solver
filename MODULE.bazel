"""
Sudoku Solver is a command-line tool for solving Sudoku puzzles.

The code presented here is a reference implementation of Algorithm X and Dancing Links (DLX) 
as originally described by Donald Knuth.For more information, check the documentation in this 
repository or the following references:

- [Wikipedia > Knuth's Algoritm X](https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X)
- [Wikipedia > Dancing Links](https://en.wikipedia.org/wiki/Dancing_Links)
- [Arxiv > Knuth's original paper on Dancing Links](https://arxiv.org/abs/cs/0011047)
"""

module(
    name = "sudoku-solver",
    version = "1.0",
)

###
# Dependencies, generic
###

# Supports linting for: Java
bazel_dep(name = "aspect_rules_lint", version = "1.0.0-rc3")

###
# Dependencies for C++ code
###

# GTest C++ unit test framework
bazel_dep(name = "googletest", version = "1.14.0")

###
# Dependencies for Java code
###

# Note: After changing maven artifacts, regenerate maven_install.json using:
#   $ REPIN=1 bazel run @maven//:pin
bazel_dep(name = "rules_jvm_external", version = "6.1")
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        # JUnit5
        "org.junit.jupiter:junit-jupiter:5.10.2",
        "org.junit.platform:junit-platform-console:1.10.2",
        # PMD linter
        "net.sourceforge.pmd:pmd:7.2.0",
    ],
    lock_file = "//:maven_install.json",
)
use_repo(maven, "maven", "unpinned_maven")

###
# Dependencies for Golang code
###

bazel_dep(name = "rules_go", version = "0.48.0")
bazel_dep(name = "gazelle", version = "0.37.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(version = "1.22.4")
go_sdk.host()

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
use_repo(
    go_deps,
    "com_github_stretchr_testify",
)

# The nogo tool is a static analyzer for Go code that is run as part of compilation
go_sdk.nogo(nogo = "//:nogo")

###
# Dependencies for Python code
###
bazel_dep(name = "rules_python", version = "0.33.2")
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# The requirements_lock.txt is updated by pip-compile
# Note: After changing python dependencies, regenerate requirements.txt using:
#   $ bazel run //:requirements.update
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)

use_repo(pip, "pip")
